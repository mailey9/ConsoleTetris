#pragma once

#include "commondef.h"
#include "Block_Abstract.h"

//  * note, 2019-01-02
//
//  각 테트로미노의 하드코딩 테이블, 4개 블럭중 인덱스 [1]을 기준으로 한다.
//  20+2 x 10+2 게임판에 대한 초기 좌표와, 개별 회전상태에 대한 오프셋 테이블.
//  일반적인 C 스타일에는 이것이 적법하기도 하다.
//
//  문제는, 현대식 테트리스의 룰 중에 'SRS(슈퍼 로테이션 시스템)' 같은 규칙이 있어
//  회전에 대한 테이블이 이보다는 복잡하다는 것.
//  (특정 상태에서 회전을 시도할 때에 주변 3x3 또는 4x4 의 범위에 대해
//   3개 ~ 5개의 포인트를 검사하여 다음 '위치들' 을 설정하는 방식. -- 공식 룰북 有)
//
//  현재 방식 (각 타입블럭을 객체로 보아 상속을 적극 활용한 방식.) 이 비합리적으로 보이나
//  만약, SRS을 지원하게 된다면 "가상함수" 방식을 쓰는 것이 훨씬 낫다.
//  --현재 Block에서 바꾸는 anchor / rot 변수 역시 각 유도클래스가 결정하도록 해야한다.
//    즉, Block은 조작 인터페이스만 제공하는 추상클래스 == "Bridge Pattern" 이다.

//  혹은 테이블을 제대로 분석해 경우를 잘 따지면 일관화가 가능할지도 모른다.
//  ( 아래와 같은 테이블의 구성 가능? )

//  어쨌든, 초기 좌표 테이블은 좀 무식한 감이 있다.
//  게임판의 클래스화 이후 따로 팩토리 형태가 옳다고 판단된다.

static constexpr Coord _initialCoords[ EBlockType::BLOCKTYPE_SIZE ][ 4 ] =
{
    { {4,1}, {5,1}, {6,1}, {7,1} }, // I
    { {4,2}, {5,2}, {4,1}, {6,2} }, // J
    { {7,2}, {6,2}, {7,1}, {5,2} }, // L
    { {5,1}, {6,1}, {5,2}, {6,2} }, // O
    { {6,1}, {5,1}, {5,2}, {4,2} }, // S
    { {5,1}, {5,2}, {4,2}, {6,2} }, // T
    { {5,1}, {6,1}, {6,2}, {7,2} }  // Z
};

static constexpr Coord _shapeOffset[ EBlockType::BLOCKTYPE_SIZE ][ ERot::ROT_SIZE ][ 4 ] =
{
    // ---- I ----
    {
        { { -1,0 },
          {  0,0 },
          { +1,0 },
          { +2,0 } },    // 0

        { { 0,-1 },
          { 0, 0 },
          { 0,+1 },
          { 0,+2 } },    // 90

        { { -1,0 },
          {  0,0 },
          { +1,0 },
          { +2,0 } },    // 180

        { { 0,-1 },
          { 0, 0 },
          { 0,+1 },
          { 0,+2 } }     // 270
    },// I

    // ---- J ----
    {
        { { -1, 0 },    // 2
          {  0, 0 },    // 013
          { -1,-1 },
          { +1, 0 } },    // 0

        { {  0,-1 },     // 02
          {  0, 0 },     // 1
          { +1,-1 },     // 3
          {  0,+1 } },    // 90

        { { +1, 0 },     // 310
          {  0, 0 },     //   2
          { +1,+1 },
          { -1, 0 } },    // 180

        { {  0,+1 },     //  3
          {  0, 0 },     //  1
          { -1,+1 },     // 20
          {  0,-1 } }     // 270
    },// J

    // ---- L ----
    {
        { { +1, 0 },    //   2
          {  0, 0 },    // 310
          { +1,-1 },
          { -1, 0 } },    // 0

        { {  0,+1 },     // 3
          {  0, 0 },     // 1
          { +1,+1 },     // 02
          {  0,-1 } },     // 90

        { { -1, 0 },     // 013
          {  0, 0 },     // 2
          { -1,+1 },
          { +1, 0 } },    // 180

        { {  0,-1 },     // 20
          {  0, 0 },     //  1
          { -1,-1 },     //  3
          {  0,+1 } },    // 270
    },// L

    // ---- O ----
    {
        { { -1, 0 }, { 0, 0 }, { -1, +1 }, { 0, +1 } },
        { { -1, 0 }, { 0, 0 }, { -1, +1 }, { 0, +1 } },
        { { -1, 0 }, { 0, 0 }, { -1, +1 }, { 0, +1 } },
        { { -1, 0 }, { 0, 0 }, { -1, +1 }, { 0, +1 } }
    },// O

    // ---- S ----
    {
        // 0
        { { +1, 0 },
          {  0, 0 },
          {  0,+1 },
          { -1,+1 } },

        // 90
        { {  0,-1 },
          {  0, 0 },
          { +1, 0 },
          { +1,+1 } },

        // 180
        { { +1, 0 },
          {  0, 0 },
          {  0,+1 },
          { -1,+1 } },

        // 270
        { {  0,-1 },
          {  0, 0 },
          { +1, 0 },
          { +1,+1 } }
    },// S

    // ---- T ----
    {
        // 0
        { {  0,-1 },
          {  0, 0 },
          { -1, 0 },
          { +1, 0 } },

        // 90
        { { +1, 0 },
          {  0, 0 },
          {  0,-1 },
          {  0,+1 } },

        // 180
        { {  0,+1 },
          {  0, 0 },
          { +1, 0 },
          { -1, 0 } },

        // 270
        { { -1, 0 },
          {  0, 0 },
          {  0,+1 },
          {  0,-1 } }
    },// T

    // ---- Z ----
    {
        // 0
        { { -1, 0 },
          {  0, 0 },
          {  0,+1 },
          { +1,+1 } },

        // 90
        { {  0,-1 },
          {  0, 0 },
          { -1, 0 },
          { -1,+1 } },

        // 180
        { { -1, 0 },
          {  0, 0 },
          {  0,+1 },
          { +1,+1 } },

        // 270
        { {  0,-1 },
          {  0, 0 },
          { -1, 0 },
          { -1,+1 } }
    },// Z
};